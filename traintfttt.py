"""
A script for training a tensorflow model to evaluate tic tac toe boards.

This script takes data generated by the tttdatasets script.

Author: Jacob Dentes
Date: 18 September 2021
"""
import pickle
import tensorflow as tf

NUM_LAYERS = 25
INPUT_SIZE = 26  # Should be the number of sqaures plus 1.
EPOCHS = 11
MODEL_NAME = 'tf_ttt_model_5' # The name of the output file.

TRAIN_DATA = 'nn_numbers_5.pkl' # The name of the pickle file with training data
TEST_DATA = 'nn_tests_5.pkl' # The name of the pickle file with test data

def main():
    # Get user input for file names and training size
    TRAIN_DATA = input('Enter name of the file containing the training data: ')
    TEST_DATA = input('Enter name of the file containing the testing data: ')
    NUM_LAYERS = int(input('Enter number of neural net layers: '))
    EPOCHS = int(input('Enter number of epochs to train for: '))
    MODEL_NAME = input('Enter name for the final model: ')


    # Load training data from pickled files
    train_data = []  # About 15,000 boards to train on
    test_data = []  # About 2,000 boards to test network accuracy on
    with open(TRAIN_DATA, 'rb') as f:
        train_data = pickle.load(f)
    with open(TEST_DATA, 'rb') as f:
        test_data = pickle.load(f)

    INPUT_SIZE = len(train_data[0][0])

    def make_list(x):
        r_list = []
        r_list.append(x)
        return r_list

    # Put the training data into a usable form
    train_inputs = [i[0] for i in train_data]
    train_outputs = [make_list(i[1]) for i in train_data]
    del train_data
    test_inputs = [i[0] for i in test_data]
    test_outputs = [make_list(i[1]) for i in test_data]
    del test_data

    print(len(train_inputs))
    print(len(train_outputs))

    # Create the tensorflow sequential model
    model = tf.keras.models.Sequential()
    for _ in range(NUM_LAYERS):
        model.add(tf.keras.layers.Dense(INPUT_SIZE, activation='tanh'))
    model.add(tf.keras.layers.Dense(1, activation='tanh'))
    model.compile(optimizer='adam', loss='mse', metrics=['accuracy'])

    # Train the model, evaluate the success
    model.fit(train_inputs, train_outputs, epochs=EPOCHS)
    model.evaluate(test_inputs, test_outputs, verbose=2)

    model.save(MODEL_NAME)

if __name__ == '__main__':
    main()
